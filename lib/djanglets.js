/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[6,8,16],$V2=[1,23],$V3=[1,15],$V4=[1,27],$V5=[1,24],$V6=[1,25],$V7=[1,26],$V8=[1,22],$V9=[6,8,16,18,33,34,37,78,82],$Va=[1,34],$Vb=[8,16,18,33,34,37,78,82],$Vc=[1,45],$Vd=[14,17,19,37],$Ve=[36,39,59,60,66,67,68,69,70,71,72,76,77],$Vf=[1,67],$Vg=[1,71],$Vh=[1,78],$Vi=[1,81],$Vj=[1,82],$Vk=[1,83],$Vl=[80,81],$Vm=[36,39,57,59,60,66,67,68,69,70,71,72,76,77],$Vn=[1,95],$Vo=[1,96],$Vp=[39,76,77],$Vq=[39,59,66,67,68,69,70,71,72,76,77],$Vr=[1,110],$Vs=[17,52,63,73,74,75],$Vt=[30,32,34,37];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"root":3,"document":4,"complete_elements":5,"EOF":6,"complete_element":7,"SPACE":8,"open_tag":9,"close_tag":10,"element_content":11,"self_closing_tag":12,"begin_open_tag":13,"CLOSE_TAG":14,"tag_contents":15,"OPEN_TAG":16,"WORD":17,"TAG_CLOSER":18,"SELF_TAG_CLOSER":19,"contents":20,"variable":21,"djtag":22,"comment":23,"html_entity":24,"tag_content":25,"attribute":26,"EQUAL":27,"BEG_QUOTE":28,"attribute_contents":29,"END_QUOTE":30,"attribute_content":31,"ATTRIB_CONTENT":32,"HTML_ENTITY":33,"OPEN_VAR":34,"djtag_variable":35,"CLOSE_VAR":36,"OPEN_DJTAG":37,"djtag_content":38,"CLOSE_DJTAG":39,"ELSE":40,"ENDIF":41,"ENDFOR":42,"INCLUDE":43,"string":44,"EXTENDS":45,"BLOCK":46,"FOR":47,"iterator_expression":48,"IF":49,"boolean_expressions":50,"ELIF":51,"BEG_DJTAG_QUOTE":52,"STRING_CONTENT":53,"END_DJTAG_QUOTE":54,"filters":55,"filter":56,"PIPE":57,"COLON":58,"IN":59,"COMMA":60,"boolean_expression":61,"boolean_operator":62,"NOT":63,"boolean_token":64,"comparison_operator":65,"EQUALS":66,"NOT_EQUALS":67,"GREATER_THAN":68,"LESS_THAN":69,"GREATER_THAN_EQUALS":70,"LESS_THAN_EQUALS":71,"NOT_IN":72,"TRUE":73,"FALSE":74,"NUMBER":75,"OR":76,"AND":77,"COMMENT_BEG":78,"comment_content":79,"COMMENT_END":80,"COMMENT_CONTENT":81,"CONTENT":82,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",8:"SPACE",14:"CLOSE_TAG",16:"OPEN_TAG",17:"WORD",18:"TAG_CLOSER",19:"SELF_TAG_CLOSER",27:"EQUAL",28:"BEG_QUOTE",30:"END_QUOTE",32:"ATTRIB_CONTENT",33:"HTML_ENTITY",34:"OPEN_VAR",36:"CLOSE_VAR",37:"OPEN_DJTAG",39:"CLOSE_DJTAG",40:"ELSE",41:"ENDIF",42:"ENDFOR",43:"INCLUDE",45:"EXTENDS",46:"BLOCK",47:"FOR",49:"IF",51:"ELIF",52:"BEG_DJTAG_QUOTE",53:"STRING_CONTENT",54:"END_DJTAG_QUOTE",57:"PIPE",58:"COLON",59:"IN",60:"COMMA",63:"NOT",66:"EQUALS",67:"NOT_EQUALS",68:"GREATER_THAN",69:"LESS_THAN",70:"GREATER_THAN_EQUALS",71:"LESS_THAN_EQUALS",72:"NOT_IN",73:"TRUE",74:"FALSE",75:"NUMBER",76:"OR",77:"AND",78:"COMMENT_BEG",80:"COMMENT_END",81:"COMMENT_CONTENT",82:"CONTENT"},
productions_: [0,[3,1],[4,0],[4,2],[5,1],[5,1],[5,2],[5,2],[7,2],[7,3],[7,1],[9,2],[9,3],[13,2],[10,3],[12,2],[12,3],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,2],[11,2],[11,2],[11,2],[11,2],[11,2],[15,1],[15,2],[25,1],[25,1],[26,5],[29,1],[29,2],[31,1],[31,1],[31,1],[24,1],[21,3],[22,3],[38,1],[38,1],[38,1],[38,1],[38,2],[38,2],[38,2],[38,2],[38,2],[38,2],[38,2],[44,3],[35,1],[35,2],[55,1],[55,2],[56,2],[56,4],[48,3],[48,5],[50,1],[50,3],[61,2],[61,1],[61,3],[61,4],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[64,1],[64,1],[64,1],[64,1],[64,1],[62,1],[62,1],[23,3],[79,1],[79,2],[20,1],[20,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

      this.$ = $$[$0]
    
break;
case 11: case 12:
this.$ = yy.visitor.visitEndOpenTag(yy.ast);;
break;
case 13:
this.$ = yy.visitor.visitOpenElement(yy.ast, $$[$0]);;
break;
case 14:
this.$ = yy.visitor.visitCloseElement(yy.ast, $$[$0-1]);;
break;
case 15:

      yy.visitor.visitSelfClosingElement(yy.ast, $$[$0]);
    
break;
case 16:

      yy.visitor.visitSelfClosingElement(yy.ast, $$[$0-1]);
    
break;
case 33:

      yy.visitor.visitAttribute(yy.ast, $$[$0-4], $$[$0-1]);
    
break;
case 35:
this.$ = this.$ = yy.visitor.visitAttributeContents(yy.ast, $$[$0-1], $$[$0]);;
break;
case 36: case 37: case 38:
this.$ = this.$ = yy.visitor.visitAttributeContent(yy.ast, $$[$0]);;
break;
case 39:
this.$ = yy.visitor.visitHTMLEntity(yy.ast, $$[$0]);;
break;
case 40:
this.$ = this.$ = yy.visitor.visitVariable(yy.ast, $$[$0-1]);;
break;
case 41:
this.$ = this.$ = "";
break;
case 42: case 43: case 44: case 45:
this.$ = yy.visitor.visitDJTagWord(yy.ast, $$[$0]);;
break;
case 46:
this.$ = yy.visitor.visitInclude(yy.ast, $$[$0]);;
break;
case 47:
this.$ = yy.visitor.visitExtends(yy.ast, $$[$0]);;
break;
case 48:
this.$ = yy.visitor.visitBlock(yy.ast, $$[$0-1]);;
break;
case 49:
this.$ = yy.visitor.visitCustomDJTag(yy.ast, $$[$0-1], $$[$0]);;
break;
case 50: case 52:
this.$ =  yy.visitor.visitDJTagWord(yy.ast, $$[$0-1], $$[$0]);;
break;
case 51:
this.$ = yy.visitor.visitDJTagWord(yy.ast, $$[$0-1], $$[$0]);;
break;
case 53:
this.$ = this.$ = $$[$0-1];
break;
case 54:

     this.$ = yy.visitor.visitDJTagVariable(yy.ast, $$[$0], []);
  
break;
case 55:

     this.$ = yy.visitor.visitDJTagVariable(yy.ast, $$[$0-1], $$[$0]);
  
break;
case 57:
this.$ = this.$ = yy.visitor.concat(yy.ast, $$[$0-1], $$[$0]);;
break;
case 58:
this.$ = this.$ = yy.visitor.visitFilter(yy.ast, $$[$0], null);;
break;
case 59:
this.$ = this.$ = yy.visitor.visitFilter(yy.ast, $$[$0-2], $$[$0]);;
break;
case 60:
this.$ = this.$ = yy.visitor.visitItertator(yy.ast, null, $$[$0-2], $$[$0]);;
break;
case 61:

    this.$ = yy.visitor.visitItertator(yy.ast, $$[$0-4], $$[$0-2], $$[$0]);
  
break;
case 63:

      this.$ = yy.visitor.visitExtendBoolean(yy.ast, $$[$0-2], $$[$0-1], $$[$0]);
  
break;
case 64:
this.$ = this.$ = yy.visitor.visitBooleanExpression(yy.ast, true, $$[$0], null, null);;
break;
case 65:
this.$ = this.$ = yy.visitor.visitBooleanExpression(yy.ast, false, $$[$0], null, null);;
break;
case 66:

      this.$ = yy.visitor.visitBooleanExpression(yy.ast, false, $$[$0-2], $$[$0-1], $$[$0]);
  
break;
case 67:

      this.$ = yy.visitor.visitBooleanExpression(yy.ast, true, $$[$0-3], $$[$0-2], $$[$0-1]);
  
break;
case 77:
this.$ = this.$ = true;;
break;
case 78:
this.$ = this.$ = false;;
break;
case 79:
this.$ = this.$ = Number($$[$0]);;
break;
case 86:
this.$ = yy.visitor.visitText(yy.ast, $$[$0]);;
break;
case 87:
this.$ = yy.visitor.visitText(yy.ast, " ");;
break;
}
},
table: [{1:[2,2],3:1,4:2,5:3,7:4,8:[1,5],9:6,12:7,13:8,16:$V0},{1:[3]},{1:[2,1]},{6:[1,10],7:11,8:[1,12],9:6,12:7,13:8,16:$V0},o($V1,[2,4]),o($V1,[2,5]),{7:16,8:$V2,9:6,10:13,11:14,12:7,13:8,16:$V0,18:$V3,20:17,21:18,22:19,23:20,24:21,33:$V4,34:$V5,37:$V6,78:$V7,82:$V8},o($V9,[2,10]),{14:[1,28],15:29,17:$Va,19:[1,30],22:33,25:31,26:32,37:$V6},{17:[1,35]},{1:[2,3]},o($V1,[2,6]),o($V1,[2,7]),o($V9,[2,8]),{7:37,8:$V2,9:6,10:36,12:7,13:8,16:$V0,18:$V3,20:38,21:39,22:40,23:41,24:42,33:$V4,34:$V5,37:$V6,78:$V7,82:$V8},{17:[1,43]},o($Vb,[2,17]),o($Vb,[2,18]),o($Vb,[2,19]),o($Vb,[2,20]),o($Vb,[2,21]),o($Vb,[2,22]),o($Vb,[2,86]),o($Vb,[2,87]),{17:$Vc,35:44},{17:[1,47],38:46,40:[1,48],41:[1,49],42:[1,50],43:[1,51],45:[1,52],46:[1,53],47:[1,54],49:[1,55],51:[1,56]},{79:57,81:[1,58]},o($Vb,[2,39]),o($Vb,[2,11]),{14:[1,59],17:$Va,19:[1,60],22:33,25:61,26:32,37:$V6},o($V9,[2,15]),o($Vd,[2,29]),o($Vd,[2,31]),o($Vd,[2,32]),{27:[1,62]},o($Vd,[2,13]),o($V9,[2,9]),o($Vb,[2,23]),o($Vb,[2,24]),o($Vb,[2,25]),o($Vb,[2,26]),o($Vb,[2,27]),o($Vb,[2,28]),{14:[1,63]},{36:[1,64]},o($Ve,[2,54],{55:65,56:66,57:$Vf}),{39:[1,68]},{17:$Vc,35:69,39:[2,42]},{39:[2,43]},{39:[2,44]},{39:[2,45]},{44:70,52:$Vg},{44:72,52:$Vg},{44:73,52:$Vg},{17:$Vc,35:75,48:74},{17:$Vc,35:80,44:84,50:76,52:$Vg,61:77,63:$Vh,64:79,73:$Vi,74:$Vj,75:$Vk},{17:$Vc,35:80,44:84,50:85,52:$Vg,61:77,63:$Vh,64:79,73:$Vi,74:$Vj,75:$Vk},{80:[1,86],81:[1,87]},o($Vl,[2,84]),o($Vb,[2,12]),o($V9,[2,16]),o($Vd,[2,30]),{28:[1,88]},o($V9,[2,14]),o([8,16,18,30,32,33,34,37,78,82],[2,40]),o($Ve,[2,55],{56:89,57:$Vf}),o($Vm,[2,56]),{17:[1,90]},o([8,14,16,17,18,19,30,32,33,34,37,78,82],[2,41]),{39:[2,49]},{39:[2,46]},{53:[1,91]},{39:[2,47]},{39:[2,48]},{39:[2,50]},{59:[1,92],60:[1,93]},{39:[2,51],62:94,76:$Vn,77:$Vo},o($Vp,[2,62]),{17:$Vc,35:80,44:84,52:$Vg,64:97,73:$Vi,74:$Vj,75:$Vk},o($Vp,[2,65],{65:98,59:[1,105],66:[1,99],67:[1,100],68:[1,101],69:[1,102],70:[1,103],71:[1,104],72:[1,106]}),o($Vq,[2,76]),o($Vq,[2,77]),o($Vq,[2,78]),o($Vq,[2,79]),o($Vq,[2,80]),{39:[2,52],62:94,76:$Vn,77:$Vo},o($Vb,[2,83]),o($Vl,[2,85]),{21:111,22:109,29:107,31:108,32:$Vr,34:$V5,37:$V6},o($Vm,[2,57]),o($Vm,[2,58],{58:[1,112]}),{54:[1,113]},{17:$Vc,35:114},{17:$Vc,35:115},{17:$Vc,35:80,44:84,52:$Vg,61:116,63:$Vh,64:79,73:$Vi,74:$Vj,75:$Vk},o($Vs,[2,81]),o($Vs,[2,82]),o($Vp,[2,64]),{17:$Vc,35:80,44:84,52:$Vg,63:[1,118],64:117,73:$Vi,74:$Vj,75:$Vk},o($Vs,[2,68]),o($Vs,[2,69]),o($Vs,[2,70]),o($Vs,[2,71]),o($Vs,[2,72]),o($Vs,[2,73]),o($Vs,[2,74]),o($Vs,[2,75]),{21:111,22:109,30:[1,119],31:120,32:$Vr,34:$V5,37:$V6},o($Vt,[2,34]),o($Vt,[2,36]),o($Vt,[2,37]),o($Vt,[2,38]),{44:121,52:$Vg},o($Vm,[2,53]),{39:[2,60]},{59:[1,122]},o($Vp,[2,63]),o($Vp,[2,66]),{17:$Vc,35:80,44:84,52:$Vg,64:123,73:$Vi,74:$Vj,75:$Vk},o($Vd,[2,33]),o($Vt,[2,35]),o($Vm,[2,59]),{17:$Vc,35:124},o($Vp,[2,67]),{39:[2,61]}],
defaultActions: {2:[2,1],10:[2,3],48:[2,43],49:[2,44],50:[2,45],69:[2,49],70:[2,46],72:[2,47],73:[2,48],74:[2,50],114:[2,60],124:[2,61]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
  if (!global.state) {
    console.log("running");
    global.state = ['INITIAL'];
  }
  function setState(state, self) {
    var previousState;
    previousState = global.state[global.state.length - 1];
    global.state.push(state);
    self.begin(state);
  }
  function prevState(self) {
    var previousState;
    global.state.pop();
    previousState = global.state[global.state.length - 1];
    //console.log("previousState", previousState);
    self.begin(previousState);
  }

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return "SPACE"
break;
case 1:
                                  setState('tag', this);
                                  return "OPEN_TAG"
                                
break;
case 2:
                                  setState('tag', this);
                                  return "TAG_CLOSER"
                                
break;
case 3:
                                  prevState(this);
                                  return "CLOSE_TAG"
                                
break;
case 4:
                                  prevState(this);
                                  return "SELF_TAG_CLOSER" 
                                
break;
case 5:
                                  console.log("into attribval");
                                  setState('attribval', this)
                                  return "BEG_QUOTE"
                                
break;
case 6:/* ignore */
break;
case 7:
                                  prevState(this);
                                  return "END_QUOTE"
                                
break;
case 8:
                                  console.log("into attrib djtag");
                                  setState('djtag', this);
                                  return "OPEN_DJTAG";
                                
break;
case 9:
                                  console.log("found attrib variable");
                                  setState('var', this);
                                  return "OPEN_VAR";
                                
break;
case 10:
                                  return "ATTRIB_CONTENT"
                                
break;
case 11:
                                  return "ATTRIB_CONTENT"
                                
break;
case 12:return "EQUAL"
break;
case 13:
                                  setState('comment', this)
                                  return "COMMENT_BEG"
                                
break;
case 14:
                                  prevState(this);
                                  return "COMMENT_END"
                                
break;
case 15:
                                  return "COMMENT_CONTENT"
                                
break;
case 16:
                                  return "COMMENT_CONTENT"
                                
break;
case 17:
                                  setState('var', this);
                                  return "OPEN_VAR";
                                
break;
case 18:
                                  prevState(this);
                                  return "CLOSE_VAR";
                                
break;
case 19:
                                  setState('djtag', this);
                                  return "OPEN_DJTAG";
                                
break;
case 20:
                                  prevState(this);
                                  console.log("closing djtajg", global.state);
                                  return "CLOSE_DJTAG";
                                
break;
case 21:return "COMMA";
break;
case 22:return "FOR";
break;
case 23:return "ENDFOR";
break;
case 24:return "IF";
break;
case 25:return "ELIF";
break;
case 26:return "ELSE";
break;
case 27:return "ENDIF";
break;
case 28:return "EXTENDS";
break;
case 29:return "IF";
break;
case 30:return "OR";
break;
case 31:return "AND";
break;
case 32:return "IN";
break;
case 33:return "NOT_IN";
break;
case 34:return "NOT";
break;
case 35:return "EQUALS";
break;
case 36:return "NOT_EQUALS";
break;
case 37:return "GREATER_THAN";
break;
case 38:return "LESS_THAN";
break;
case 39:return "GREATER_THAN_EQUALS";
break;
case 40:return "LESS_THAN_EQUALS";
break;
case 41:return "TRUE";
break;
case 42:return "FALSE";
break;
case 43:return "COLON";
break;
case 44:return "PIPE";
break;
case 45:return "NUMBER";
break;
case 46:/* ignore */
break;
case 47:
                                  setState('doublequote', this);
                                  return "BEG_DJTAG_QUOTE";
                                
break;
case 48:return "STRING_CONTENT";
break;
case 49:
                                  prevState(this);
                                  return "END_DJTAG_QUOTE";
                                
break;
case 50:
                                  setState('singlequote', this);
                                  return "BEG_DJTAG_QUOTE";
                                
break;
case 51:return "STRING_CONTENT";
break;
case 52:
                                  prevState(this);
                                  return "END_DJTAG_QUOTE";
                                
break;
case 53:return "HTML_ENTITY";
break;
case 54:return "HTML_ENTITY";
break;
case 55:return "WORD";
break;
case 56:return "WORD";
break;
case 57:
                                  setState('escape', this);
                                
break;
case 58:
                                  prevState(this);
                                
break;
case 59:return "EOF"
break;
case 60:return "CONTENT"
break;
}
},
rules: [/^(?:\s+)/,/^(?:<(?=\w+))/,/^(?:<\/(?=\w+))/,/^(?:>)/,/^(?:\/>)/,/^(?:["\"'"])/,/^(?:\s+)/,/^(?:["\"'"])/,/^(?:\{%\s*)/,/^(?:\{\{\s*)/,/^(?:\s)/,/^(?:.)/,/^(?:=)/,/^(?:<!--)/,/^(?:-->)/,/^(?:\s)/,/^(?:.)/,/^(?:\{\{\s*)/,/^(?:\s*\}\})/,/^(?:\{%\s*)/,/^(?:%\})/,/^(?:\s*,)/,/^(?:for\b)/,/^(?:endfor\b)/,/^(?:if\b)/,/^(?:elif\b)/,/^(?:else\b)/,/^(?:endif\b)/,/^(?:extends\b)/,/^(?:include\b)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:in\b)/,/^(?:not in\b)/,/^(?:not\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:<)/,/^(?:>=)/,/^(?:<=)/,/^(?:True\b)/,/^(?:False\b)/,/^(?::)/,/^(?:\|)/,/^(?:-?[0-9]+(?:\.[0-9]+)?)/,/^(?:\s+)/,/^(?:")/,/^(?:([^"\""])+)/,/^(?:")/,/^(?:')/,/^(?:([^"'"])+)/,/^(?:')/,/^(?:&#x\d{4};)/,/^(?:&\w+;)/,/^(?:\w+)/,/^(?:[\w"."]+)/,/^(?:\\\{)/,/^(?:.)/,/^(?:$)/,/^(?:([^<\s])+)/],
conditions: {"comment":{"rules":[14,15,16,59],"inclusive":true},"escape":{"rules":[58,59],"inclusive":true},"tag":{"rules":[3,4,5,6,12,17,19,55],"inclusive":false},"var":{"rules":[18,43,44,45,46,47,50,56],"inclusive":false},"attribval":{"rules":[7,8,9,10,11],"inclusive":false},"djtag":{"rules":[20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,50,55],"inclusive":false},"singlequote":{"rules":[51,52],"inclusive":false},"doublequote":{"rules":[48,49],"inclusive":false},"INITIAL":{"rules":[0,1,2,13,17,19,53,54,57,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}