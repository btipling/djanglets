/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[6,8,13],$V2=[1,22],$V3=[1,14],$V4=[1,26],$V5=[1,23],$V6=[1,24],$V7=[1,25],$V8=[1,21],$V9=[6,8,13,17,34,35,37,40,44],$Va=[8,13,17,34,35,37,40,44],$Vb=[1,45],$Vc=[42,43],$Vd=[14,15,18,25],$Ve=[1,59],$Vf=[1,60],$Vg=[29,30],$Vh=[14,15,18,25,29,30,31];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"root":3,"document":4,"complete_elements":5,"EOF":6,"complete_element":7,"SPACE":8,"open_tag":9,"close_tag":10,"element_content":11,"self_closing_tag":12,"OPEN_TAG":13,"WORD":14,"CLOSE_TAG":15,"attributes":16,"TAG_CLOSER":17,"SELF_TAG_CLOSER":18,"contents":19,"variable":20,"djtag":21,"comment":22,"html_entity":23,"attribute":24,"TAG_SPACE":25,"EQUAL":26,"quote":27,"attribute_content":28,"BEG_QUOTE":29,"END_QUOTE":30,"ATTRIB_CONTENT":31,"non_variable_attr_content":32,"words":33,"HTML_ENTITY":34,"OPEN_VAR":35,"CLOSE_VAR":36,"OPEN_DJTAG":37,"CLOSE_DJTAG":38,"COMMA":39,"COMMENT_BEGIN":40,"comment_content":41,"COMMENT_END":42,"COMMENT_CONTENT":43,"CONTENT":44,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",8:"SPACE",13:"OPEN_TAG",14:"WORD",15:"CLOSE_TAG",17:"TAG_CLOSER",18:"SELF_TAG_CLOSER",25:"TAG_SPACE",26:"EQUAL",29:"BEG_QUOTE",30:"END_QUOTE",31:"ATTRIB_CONTENT",34:"HTML_ENTITY",35:"OPEN_VAR",36:"CLOSE_VAR",37:"OPEN_DJTAG",38:"CLOSE_DJTAG",39:"COMMA",40:"COMMENT_BEGIN",42:"COMMENT_END",43:"COMMENT_CONTENT",44:"CONTENT"},
productions_: [0,[3,1],[4,0],[4,2],[5,1],[5,1],[5,2],[5,2],[7,2],[7,3],[7,1],[9,3],[9,4],[10,3],[12,3],[12,4],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,2],[11,2],[11,2],[11,2],[11,2],[11,2],[16,1],[16,1],[16,2],[16,2],[24,5],[27,1],[27,1],[28,0],[28,1],[32,1],[32,1],[32,1],[32,2],[32,2],[32,2],[33,1],[33,2],[33,2],[23,1],[20,3],[21,6],[21,4],[21,13],[22,3],[41,1],[41,2],[19,1],[19,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

      this.$ = $$[$0]
    
break;
case 11:
this.$ = yy.visitor.visitOpenElement(yy.ast, $$[$0-1]);;
break;
case 12:
this.$ = yy.visitor.visitOpenElement(yy.ast, $$[$0-2]);;
break;
case 13:
this.$ = yy.visitor.visitCloseElement(yy.ast, $$[$0-1]);;
break;
case 14:

      yy.visitor.visitSelfClosingElement(yy.ast, $$[$0-1]);
    
break;
case 15:

      yy.visitor.visitSelfClosingElement(yy.ast, $$[$0-2]);
    
break;
case 32:

      yy.visitor.visitAttribute(yy.ast, $$[$0-4], $$[$0-1]);
    
break;
case 46:
this.$ = yy.visitor.visitHTMLEntity(yy.ast, $$[$0]);;
break;
case 47:
this.$ = yy.visitor.visitVariable(yy.ast, $$[$0-1]);;
break;
case 48:
this.$ = yy.visitor.visitComputeDjtag(yy.ast, $$[$0-4], $$[$0-2]);;
break;
case 49:
this.$ = yy.visitor.visitSignalDjtag(yy.ast, $$[$0-2]);;
break;
case 50:

      yy.visitor.visitForDjtag(yy.ast, $$[$0-11], $$[$0-9], $$[$0-6], $$[$0-4], $$[$0-2]);
    
break;
case 54:
this.$ = yy.visitor.visitText(yy.ast, $$[$0]);;
break;
case 55:
this.$ = yy.visitor.visitText(yy.ast, " ");;
break;
}
},
table: [{1:[2,2],3:1,4:2,5:3,7:4,8:[1,5],9:6,12:7,13:$V0},{1:[3]},{1:[2,1]},{6:[1,9],7:10,8:[1,11],9:6,12:7,13:$V0},o($V1,[2,4]),o($V1,[2,5]),{7:15,8:$V2,9:6,10:12,11:13,12:7,13:$V0,17:$V3,19:16,20:17,21:18,22:19,23:20,34:$V4,35:$V5,37:$V6,40:$V7,44:$V8},o($V9,[2,10]),{14:[1,27]},{1:[2,3]},o($V1,[2,6]),o($V1,[2,7]),o($V9,[2,8]),{7:29,8:$V2,9:6,10:28,12:7,13:$V0,17:$V3,19:30,20:31,21:32,22:33,23:34,34:$V4,35:$V5,37:$V6,40:$V7,44:$V8},{14:[1,35]},o($Va,[2,16]),o($Va,[2,17]),o($Va,[2,18]),o($Va,[2,19]),o($Va,[2,20]),o($Va,[2,21]),o($Va,[2,54]),o($Va,[2,55]),{14:[1,36]},{14:[1,37]},{41:38,43:[1,39]},o($Va,[2,46]),{14:$Vb,15:[1,40],16:41,18:[1,42],24:43,25:[1,44]},o($V9,[2,9]),o($Va,[2,22]),o($Va,[2,23]),o($Va,[2,24]),o($Va,[2,25]),o($Va,[2,26]),o($Va,[2,27]),{15:[1,46]},{36:[1,47]},{8:[1,48]},{42:[1,49],43:[1,50]},o($Vc,[2,52]),o($Va,[2,11]),{14:$Vb,15:[1,51],18:[1,52],24:53,25:[1,54]},o($V9,[2,14]),o($Vd,[2,28]),o($Vd,[2,29]),{26:[1,55]},o($V9,[2,13]),o($Va,[2,47]),{14:[1,56],38:[1,57]},o($Va,[2,51]),o($Vc,[2,53]),o($Va,[2,12]),o($V9,[2,15]),o($Vd,[2,30]),o($Vd,[2,31]),{27:58,29:$Ve,30:$Vf},{8:[1,61],39:[1,62]},o($Va,[2,49]),o($Vg,[2,35],{28:63,31:[1,64]}),o($Vh,[2,33]),o($Vh,[2,34]),{38:[1,65]},{8:[1,66]},{27:67,29:$Ve,30:$Vf},o($Vg,[2,36]),o($Va,[2,48]),{14:[1,68]},o($Vd,[2,32]),{8:[1,69]},{14:[1,70]},{8:[1,71]},{14:[1,72]},{8:[1,73]},{38:[1,74]},o($Va,[2,50])],
defaultActions: {2:[2,1],9:[2,3]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return "TAG_SPACE"
break;
case 1:return "SPACE"
break;
case 2:
                                  this.begin('tag');
                                  return "OPEN_TAG"
                                
break;
case 3:
                                  this.begin('tag');
                                  return "TAG_CLOSER"
                                
break;
case 4:
                                  this.begin('INITIAL');
                                  return "CLOSE_TAG"
                                
break;
case 5:
                                  this.begin('INITIAL');
                                  return "SELF_TAG_CLOSER" 
                                
break;
case 6:
                                  this.begin('attribval')
                                  return "BEG_QUOTE"
                                
break;
case 7:
                                  this.begin('tag')
                                  return "END_QUOTE"
                                
break;
case 8:return "ATTRIB_CONTENT"
break;
case 9:return "EQUAL"
break;
case 10:
                                  this.begin('comment')
                                  return "COMMENT_BEGIN"
                                
break;
case 11:
                                  this.begin('INITIAL');
                                  return "COMMENT_END"
                                
break;
case 12:
                                  return "COMMENT_CONTENT"
                                
break;
case 13:
                                  return "COMMENT_CONTENT"
                                
break;
case 14:
                                  this.begin('var');
                                  return "OPEN_VAR"
                                
break;
case 15:
                                  this.begin('INITIAL');
                                  return "CLOSE_VAR"
                                
break;
case 16:
                                  this.begin('djtag');
                                  return "OPEN_DJTAG"
                                
break;
case 17:
                                  this.begin('INITIAL');
                                  return "CLOSE_DJTAG"
                                
break;
case 18:return "COMMA"
break;
case 19:return "HTML_ENTITY"
break;
case 20:return "HTML_ENTITY"
break;
case 21:return "WORD"
break;
case 22:return "WORD"
break;
case 23:
                                  this.begin("escape");
                                
break;
case 24:
                                  this.begin("INITIAL");
                                
break;
case 25:return "EOF"
break;
case 26:return "CONTENT"
break;
}
},
rules: [/^(?:\s+)/,/^(?:\s+)/,/^(?:<(?=\w+))/,/^(?:<\/(?=\w+))/,/^(?:>)/,/^(?:\/>)/,/^(?:["\"'"])/,/^(?:["\"'"])/,/^(?:[^"\"'"]+)/,/^(?:=)/,/^(?:<!--)/,/^(?:-->)/,/^(?:\s)/,/^(?:.)/,/^(?:\{\{\s*)/,/^(?:\s*\}\})/,/^(?:\{%\s*)/,/^(?:%\})/,/^(?:\s*,)/,/^(?:&#x\d{4};)/,/^(?:&\w+;)/,/^(?:\w+)/,/^(?:[\w"."]+)/,/^(?:\\\{)/,/^(?:.)/,/^(?:$)/,/^(?:([^"<"\s])+)/],
conditions: {"comment":{"rules":[11,12,13,25],"inclusive":true},"escape":{"rules":[24,25],"inclusive":true},"tag":{"rules":[0,4,5,6,9,14,16,21],"inclusive":false},"var":{"rules":[15,22],"inclusive":false},"attribval":{"rules":[7,8],"inclusive":false},"djtag":{"rules":[1,17,18,21],"inclusive":false},"INITIAL":{"rules":[1,2,3,10,14,16,19,20,23,25,26],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}


/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	var  ast = __webpack_require__(1);

	function handler(compileStep) {
	  "use strict";
	  var contents, outputFile,
	    parsed, yy = {},
	    result, output;


	  contents = compileStep.read().toString("utf8");
	  outputFile = compileStep.inputPath + ".js";

	  yy.visitor = ast.visitor;
	  yy.ast = ast.createAst();
	  parser.yy = yy;
	  parsed = parser.parse(contents);
	  result = yy.ast.valueOf();
	  output = "if (Meteor.isClient) {djanglets(" + JSON.stringify(result, null, 2) + ");}";
	  compileStep.addJavaScript({
	    path: outputFile,
	    sourcePath: compileStep.inputPath,
	    data: output,
	    sourceMap: null,
	    bare: compileStep.fileOptions.bare
	  });
	}

	Plugin.registerSourceHandler("dhtml", handler);



/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * root
	 *  \     \
	 *   node  node
	 *   \         \
	 *   text node   node
	 *
	 *
	 *   element - info about element (attributes, tag type)
	 *   pointers
	 *   \
	 *
	 *   textObj - value
	 *
	 *   attributes - name, value, if value is object it's a variable
	 *
	 *   variable
	 *    - value
	 *
	 *
	 *   ifConditial 
	 *   - elif array -- checker(variable)
	 *        - pointer if true
	 *   - else - 
	 *        - pointer if no elif did not get fired
	 *   - does nothing if no else
	 *
	 *
	 *   for (calls Object.keys for object, length on Array)
	 *      pointer to its stuff
	 *
	 *   filters: separate filters property that is a bunch of functions and take arguments
	 *   djtag: TODO
	 *   include: TODO
	 *   extends: TODO
	 *   custom tags: TODO
	 *   tag in attribute value: TODO
	 *   variable or tag inside string in attribute value
	 *
	 *
	 *   template tree -> execution tree (all vars ifs, fors turned into nodes and text)
	 *
	 *   if no existing tree, dump tree into HTML
	 *
	 *
	 *   if existing tree, find differences, separate the difference into queue and dump those pieces
	 *
	 *
	 *   dumping into HTML:
	 *
	 *    you create a template
	 *    create instance of template, and give a containing element.
	 *    define variables as arguments to `helpers` as per meteor
	 *
	 *  the end of this is a class, a class that checks its helpers for variable info.
	 *
	 *
	 *
	 */

	var visitor,
	    ast,
	    computeDjtagTypes,
	    signalDjtagTypes,
	    djtagDeps,
	    variable = __webpack_require__(2),
	    element = __webpack_require__(3),
	    ifTag = __webpack_require__(4),
	    forTag = __webpack_require__(5),
	    attribute = __webpack_require__(6),
	    entityLookup = __webpack_require__(7),
	    template = __webpack_require__(8);

	/**
	 * A list of possible compute djanglet tag types.
	 * @type {Array.<string>}
	 */
	computeDjtagTypes = [template.type.IF, template.type.ELIF];
	/**
	 * A list of possible signal djanglet tag types.
	 * @type {Array.<string>}
	 */
	signalDjtagTypes = [
	  template.type.ELSE,
	  template.type.ENDIF,
	  template.type.ENDFOR,
	];
	/**
	 * A map of djanglet tag type parent requirements. Some compute types can only be
	 * children of certain types of tags.
	 * @type {Object.<string, Array.<string>>}
	 */
	djtagDeps = {};
	djtagDeps[template.type.IF] = [
	  template.TEMPLATE_TYPE,
	  template.type.ELEMENT,
	  template.type.ELIF,
	  template.type.ELSE,
	  template.type.FOR,
	];
	djtagDeps[template.type.FOR] = djtagDeps[template.type.IF];
	djtagDeps[template.type.ELIF] = [template.type.ELIF];
	djtagDeps[template.type.ELSE] = [template.type.ELIF];
	djtagDeps[template.type.ENDIF] = [template.type.ELIF, template.type.ELSE];
	djtagDeps[template.type.ENDFOR] = [template.type.FOR];


	ast = {
	  /**
	   * @param {Object} node
	   */
	  addNodeToStack: function (node) {
	      this.state.nodeStack.push(node);
	  },
	  /**
	   * @return {Object} node
	   */
	  getCurrentNode: function () {
	    return this.state.nodeStack[this.state.nodeStack.length - 1];
	  },
	  /**
	   * Reduce the node stack by one element.
	   */
	  popNodeStack: function () {
	    this.state.nodeStack.pop();
	  },
	};

	function createAst () {
	  var instance;
	  instance = Object.create(ast, {
	    initialize: {
	      value: function () {
	        this.state = {};
	        Object.defineProperties(this.state, {
	          currentText: {
	            value: "",
	            writable: true,
	          },
	          nodeStack: {
	            value: [],
	          },
	          currentAttributes: {
	            value: [],
	            writable: true,
	          },
	          ast: {
	            value: null,
	            writable: true,
	          }
	        });
	      },
	    },
	    get: {
	      value: function () {
	        return this.state.ast;
	      }
	    },
	    valueOf: {
	      value: function () {
	        var values;
	        values = [];
	        values = this.state.ast.map(function (ast) {
	          return ast.valueOf();
	        });
	        return values;
	      },
	    },
	  });
	  instance.initialize();
	  return instance;
	}

	visitor = {
	  /**
	   * @param {ast} ast
	   * @param {string} type
	   * @throws {Error} If first element in a root is not a template element.
	   * @return {Element}
	   */
	  visitOpenElement: function (ast, type) {
	    var el, node;
	    this.endText(ast);
	    el = element.createElement();
	    el.type = type.toUpperCase();
	    if (!ast.state.ast) {
	      ast.state.ast = [];
	    }
	    node = ast.getCurrentNode();
	    if (!node) {
	      if (type.toUpperCase() !== template.TEMPLATE_TYPE) {
	        throw new Error("Root element must be a <template> element");
	      }
	      ast.state.ast.push(el);
	    } else {
	      node.children.push(el);
	    }
	    ast.addNodeToStack(el);
	    this.endAttributes(ast);
	    return el;
	  },
	  /**
	   * @param {ast} ast
	   * @param {string} type
	   */
	  visitCloseElement: function (ast, type) {
	    this.endText(ast);
	    ast.popNodeStack();
	  },
	  /**
	   * @param {ast} ast
	   * @param {string} type
	   */
	  visitSelfClosingElement: function (ast, type) {
	    var el;
	    el = this.visitOpenElement(ast, type);
	    el.selfClosing = true;
	    this.visitCloseElement(ast, type);
	  },
	  /**
	   * @param {ast} ast
	   * @param {string} name
	   * @param {string} value
	   */
	  visitAttribute: function(ast, name, value) {
	    var attr;
	    attr = attribute.createAttribute();
	    attr.name = name;
	    attr.value = value;
	    ast.state.currentAttributes.push(attr);
	  },
	  /**
	   * @param {ast} ast
	   * @param {string} name
	   * @param {string} variableName
	   */
	  visitAttributeVariable: function(ast, name, variableName) {
	    //console.log("visiting attribute variable type", name, variableName);
	  },
	  /**
	   * @param {ast} ast
	   * @param {string} text
	   */
	  visitText: function (ast, text) {
	    ast.state.currentText += text;
	  },
	  /**
	   * @param {ast} ast
	   * @param {string} text
	   */
	  visitHTMLEntity: function (ast, entity) {
	    var replacement;
	    if (entityLookup.entities.hasOwnProperty(entity)) {
	      replacement = entityLookup.entities[entity];
	      console.log("Has!", entity, replacement);
	      this.visitText(ast, replacement);
	      return;
	    }
	    replacement = entityLookup.regexp.exec(entity);
	    if (replacement) {
	      return this.visitText(ast, replacement[1]);
	    }
	  },
	  /**
	   * @throws {Error} Can't be root node.
	   * @param {ast} ast
	   * @param {string} name
	   */
	  visitVariable: function (ast, name) {
	    var node;
	    this.endText(ast);
	    node = ast.getCurrentNode();
	    if (!node) {
	      throw new Error("A variable can't be the root node.");
	    }
	    node.children.push(variable.createVariable(name));
	  },
	  /**
	   * @throws {Error} endText should never be called if there's no current node.
	   * @param {ast} ast
	   */
	  endText: function (ast) {
	    var node;
	    if (ast.state.currentText === "") {
	      return;
	    }
	    node = ast.getCurrentNode();
	    if (!node) {
	      throw new Error("No node to add text to.");
	    }
	    node.children.push(ast.state.currentText);
	    ast.state.currentText = "";
	  },
	  /**
	   * @param {ast} ast
	   */
	  endAttributes: function (ast) {
	    var node;
	    node = ast.getCurrentNode();
	    if (!node) {
	      return;
	    }
	    ast.state.currentAttributes.forEach(function (attr) {
	      node.attributes.push(attr);
	    });
	    ast.state.currentAttributes = [];
	  },
	  visitComputeDjtag: function (ast, type, variable) {
	    var node, tag;
	    this.endText(ast);
	    type = type.toUpperCase();
	    if (computeDjtagTypes.indexOf(type) === -1) {
	      throw new Error(
	        "Invalid (compute) djanglets tag type. Supported types: " + computeDjtagTypes.join(","));
	    }
	    node = ast.getCurrentNode();
	    if (djtagDeps[type].indexOf(node.djangletType || node.type) === -1) {
	      throw new Error(type + " cannot be a child of " + node.type);
	    }
	    switch (type) {
	      case template.type.IF:
	        //If statements wrap elif and ifs. The first if is just an elif.
	        tag = ifTag.createIf();
	        node.children.push(tag);
	        ast.addNodeToStack(tag);
	        node = tag;
	        tag = ifTag.createElif(variable);
	        node.children.push(tag);
	        ast.addNodeToStack(tag);
	        return;
	      case template.type.ELIF:
	        ast.popNodeStack(); //End the previous elif.
	        tag = ifTag.createElif(variable);
	        node = ast.getCurrentNode();
	        node.children.push(tag);
	        ast.addNodeToStack(tag);
	        return;
	    }
	  },
	  visitSignalDjtag: function (ast, type) {
	    var node, tag;
	    this.endText(ast);
	    type = type.toUpperCase();
	    if (signalDjtagTypes.indexOf(type) === -1) {
	      throw new Error(
	        "Invalid (signal) djanglets tag type. Supported types: " + signalDjtagTypes.join(","));
	    }
	    node = ast.getCurrentNode();
	    if (djtagDeps[type].indexOf(node.djangletType || node.type) === -1) {
	      throw new Error(type + " cannot be a child of " + node.type);
	    }
	    switch (type) {
	      case template.type.ELSE:
	        ast.popNodeStack(); //End the previous elif.
	        tag = ifTag.createElse(variable);
	        node = ast.getCurrentNode();
	        node.children.push(tag);
	        ast.addNodeToStack(tag);
	        return;
	      case template.type.ENDIF:
	        ast.popNodeStack(); //End the previous elif or else.
	        ast.popNodeStack(); //End the if.
	        return;
	      case template.type.ENDFOR:
	        ast.popNodeStack();
	        return;
	    }
	  },
	  visitForDjtag: function(ast, type, key, value, inSep, variable) {
	    var node, forNode;
	    this.endText(ast);
	    type = type.toUpperCase();
	    inSep = inSep.toUpperCase();
	    if (type !== template.type.FOR || inSep !== template.type.IN) {
	      throw new Error([
	          "Invalid for loop. Template tag must \"for\" and use \"in\":",
	          "{% for k, v in %}",
	      ].join(" "));
	    }
	    node = ast.getCurrentNode();
	    if (djtagDeps[type].indexOf(node.djangletType || node.type) === -1) {
	      throw new Error(type + " cannot be a child of " + node.type);
	    }
	    forNode = forTag.createFor(key, value, variable);
	    node.children.push(forNode);
	    ast.addNodeToStack(forNode);
	  },
	};



	module.exports = {
	  visitor: visitor,
	  createAst: createAst,
	};


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Variable,
	    escapes,
	    utils = __webpack_require__(9),
	    type = __webpack_require__(8).type;

	/**
	 * @enum {Object.<string, RegExp>}
	 */
	escapes = {
	  "&amp;": /&/g,
	  "&lt;": /</g,
	  "&gt;": />/g,
	  "&quot;": /"/g,
	  "&#39;": /'/g,
	};

	/**
	 * Prototype for Variable.
	 */
	Variable = {
	  /**
	   * @type {string}
	   * @private
	   */
	  name_: "",
	};

	/**
	 * @param {string} name
	 */
	function createVariable(name) {
	  var variable;
	  variable = Object.create(Variable, {
	    name: {
	      set: function (name) {
	        this.name_ = name;
	      },
	      get: function () {
	        return this.name_;
	      },
	      enumerable: true,
	    },
	    valueOf: {
	      value: function () {
	        return {
	          type: type.VARIABLE,
	          name: this.name,
	        };
	      },
	    },
	    /**
	     * @param {Object=} opt_data
	     * return {string}
	     */
	    toString: {
	      value: function (opt_data) {
	        var result = utils.getVariable(this.name, opt_data || {});
	        if (Error.prototype.isPrototypeOf(result)) {
	          return "";
	        }
	        return this.escape("" + result);
	      },
	    },
	    /**
	     * @return {Variable}
	     */
	    preRender: {
	      value: function () {
	        return [this];
	      },
	      enumerable: true,
	    },
	    /**
	     * @param {string}
	     * @return {string}
	     */
	    escape: {
	      value: function (text) {
	        var keys;
	        keys = Object.keys(escapes);
	        keys.forEach(function (safe) {
	          var unsafe;
	          unsafe = escapes[safe];
	          text = text.replace(unsafe, safe);
	        });
	        return text;
	      }
	    },
	  });
	  variable.name = name;
	  return variable;
	};

	module.exports = {
	  Variable: Variable,
	  createVariable: createVariable,
	};


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Element,
	    utils = __webpack_require__(9),
	    template = __webpack_require__(8);

	/**
	 * Element prototype.
	 */
	Element = {
	  /**
	   * @string
	   * @private
	   */
	  elementType_: "",
	};

	/**
	 * @return Element
	 */
	function createElement() {
	  return Object.create(Element, {
	    /**
	     * @type {string}
	     */
	    id: {
	      value: "djlt." + utils.getUniqueId(),
	    },
	    djangletType: {
	      value: template.type.ELEMENT,
	    },
	    type: {
	      set: function (type) {
	        this.elementType_ = type.toUpperCase();
	      },
	      get: function () {
	        return this.elementType_;
	      },
	      enumerable: true,
	    },
	    /**
	     * @type {boolean}
	     */
	    selfClosing: {
	      value: false,
	      writable: true,
	      enuerable: true,
	    },
	    /**
	     * @type {Array.<Attribute>}
	     */
	    attributes: {
	      enumberable: true,
	      value: [],
	    },
	    /**
	     * @type {Array.<string|Variable|Element>}
	     */
	    children: {
	      enumberable: true,
	      value: [],
	    },
	    /**
	     * @return {Object}
	     */
	    valueOf: {
	      value: function () {
	        var children, attributes, value;
	        children = this.children.map(function (child) {
	          return child.valueOf();
	        });
	        attributes = this.attributes.map(function (attr) {
	          return attr.valueOf();
	        });
	        value = {
	          id: this.id,
	          type: template.type.ELEMENT,
	          name: this.type,
	        };
	        if (this.selfClosing) {
	          value.selfClosing = true;
	        }
	        if (children.length) {
	          value.children = children;
	        }
	        if (attributes.length) {
	          value.attributes = attributes;
	        }
	        return value;
	      },
	    },
	    /**
	     * @return {Array}
	     */
	    preRender: {
	      value: function () {
	        var children, results;
	        children = [];
	        this.children.forEach(function (child) {
	          if (child.hasOwnProperty("preRender")) {
	            children = children.concat(child.preRender());
	          } else {
	            children.push(child.toString());
	          }
	        });
	        if (this.type === template.TEMPLATE_TYPE) {
	          return children;
	        }
	        results = [];
	        utils.flattenPreRender(results, children);
	        return [Object.create({}, {
	          type: {
	            value: this.type,
	          },
	          attributes: {
	            value: this.attributes,
	          },
	          children: {
	            value: results,
	          },
	          selfClosing: {
	            value: this.selfClosing,
	          },
	          /**
	           * @param {*=} opt_data
	           * @return {string}
	           */
	          toString: {
	            value: function (opt_data) {
	              var result, id, resultId;
	              result  = ["<", this.type];
	              this.attributes.forEach(function (attr) {
	                result.push(" ");
	                result.push(attr.name);
	                result.push("=\"");
	                result.push(attr.value);
	                result.push("\"");
	              });
	              if (this.selfClosing) {
	                result.push("/>");
	                return result.join("");
	              }
	              result.push(">");
	              result = result.concat(this.children.map(function (child) {
	                if (typeof child === "string") {
	                  return child;
	                }
	                return child.toString(opt_data);
	              }));
	              result.push("</");
	              result.push(this.type);
	              result.push(">");
	              return result.join("");
	            },
	            enumerable: true,
	          },
	        })];
	      },
	    },
	  });
	}

	module.exports = {
	  Element: Element,
	  createElement: createElement,
	};


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var If, Elif, Else,
	    utils = __webpack_require__(9),
	    type = __webpack_require__(8).type;

	If = {};

	function createIf() {
	  return Object.create(If, {
	    /**
	     * @type {string}
	     */
	    type: {
	      value: type.IF,
	      enumerable: true,
	    },
	    /**
	     * @type {Array.<Else|Elif>}
	     */
	    children: {
	      value: [],
	      enumerable: true,
	    },
	    valueOf: {
	      value: function () {
	        return {
	          type: type.IF,
	          children: this.children.map(function (child) {
	            return child.valueOf();
	          }),
	        };
	      },
	      enumerable: true,
	    },
	    preRender: {
	      value: function () {
	        var elifs, elseCondition;
	        elifs = {};
	        this.children.forEach(function (child) {
	          var pieces, results = [];
	          if (child.type === type.ELIF) {
	            pieces = child.children.map(function (subchild) {
	              if (subchild.hasOwnProperty("preRender")) {
	                return subchild.preRender();
	              } else {
	                return subchild.toString();
	              }
	            });
	            utils.flattenPreRender(results, pieces);
	            elifs[child.variable] = results;
	          } else if (child.type === type.ELSE) {
	            pieces = child.children.map(function (subchild) {
	              if (subchild.hasOwnProperty("preRender")) {
	                return subchild.preRender();
	              } else {
	                return subchild.toString();
	              }
	            });
	            utils.flattenPreRender(results, pieces);
	            elseCondition = results;
	          } else {
	            throw new Error("Invalid if context, only elif and else can be children of if.");
	          }
	        });
	        return [Object.create({}, {
	          elifs: {
	            value: elifs,
	          },
	          else: {
	            value: elseCondition,
	          },
	          /**
	           * @param {Object=} opt_data
	           * return {string}
	           */
	          toString: {
	            value: function (opt_data) {
	              var data, variable, variables, result, i;
	              data = opt_data || {};
	              variables = Object.keys(this.elifs);
	              for (i = 0; i < variables.length; i++) {
	                variable = variables[i];
	                if (data[variable]) {
	                  return this.elifs[variable].map(function (child) {
	                    return child.toString(opt_data);
	                  }).join("");
	                }
	              }
	              if (this.else) {
	                return this.else.toString(opt_data);
	              }
	              return "";
	            },
	          },
	        })];
	      },
	      enumerable: true,
	    },
	    /**
	     * @param {Object=} opt_data
	     * return {string}
	     */
	    toString: {
	      value: function (opt_data) {
	        throw new Error("Ifs cannot be strings");
	      },
	    },
	  });
	}

	Elif = {};

	/**
	 * @param {string} name
	 * @return {Elif}
	 */
	function createElif(name) {
	  /**
	   * @type {Elif}
	   * @constructor
	   */
	  return Object.create(Elif, {
	    /**
	     * @type {string}
	     */
	    type: {
	      value: type.ELIF,
	      enumerable: true,
	    },
	    /**
	     * @type {string}
	     */
	    variable: {
	      value: name,
	      enumerable: true,
	    },
	    /**
	     * @type {Array.<Object>}
	     */
	    children: {
	      value: [],
	      enumerable: true,
	    },
	    valueOf: {
	      value: function () {
	        return {
	          type: type.ELIF,
	          variable: this.variable,
	          children: this.children.map(function (child) {
	            return child.valueOf();
	          }),
	        };
	      },
	    },
	  });
	}

	Else = {};

	/**
	 * @return {Else}
	 */
	function createElse() {
	  /**
	   * @type {Else}
	   * @constructor
	   */
	  return Object.create(Else, {
	    /**
	     * @type {string}
	     */
	    type: {
	      value: type.ELSE,
	      enumerable: true,
	    },
	    /**
	     * @type {Array.<Object>}
	     */
	    children: {
	      value: [],
	      enumerable: true,
	    },
	    valueOf: {
	      value: function () {
	        return {
	          type: type.ELSE,
	          children: this.children.map(function (child) {
	            return child.valueOf();
	          }),
	        };
	      },
	    },
	  });
	}

	module.exports = {
	  If: If,
	  Elif: Elif,
	  Else: Else,
	  createIf: createIf,
	  createElif: createElif,
	  createElse: createElse,
	};


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var For,
	    utils = __webpack_require__(9),
	    type = __webpack_require__(8).type;

	For = {};

	/**
	 * @param {string} key
	 * @param {string} value
	 * @param {string} variable
	 * @return {For}
	 */
	function createFor(key, value, variable) {
	  /**
	   * @type {For}
	   * @constructor
	   */
	  return Object.create(For, {
	    /**
	     * @type {string}
	     */
	    type: {
	      value: type.FOR,
	      enumerable: true,
	    },
	    /**
	     * @type {string}
	     */
	    key: {
	      value: key,
	      enumerable: true,
	    },
	    /**
	     * @type {string}
	     */
	    value: {
	      value: value,
	      enumerable: true,
	    },
	    /**
	     * @type {string}
	     */
	    variable: {
	      value: variable,
	      enumerable: true,
	    },
	    /**
	     * @type {Array.<Object>}
	     */
	    children: {
	      value: [],
	      enumerable: true,
	    },
	    valueOf: {
	      value: function () {
	        return {
	          type: type.FOR,
	          children: this.children.map(function (child) {
	            return child.valueOf();
	          }),
	          key: this.key,
	          value: this.value,
	          variable: this.variable,
	        };
	      },
	      enumerable: true,
	    },
	    preRender: {
	      value: function () {
	        var results = [], pieces;
	        pieces = this.children.map(function (subchild) {
	          if (subchild.hasOwnProperty("preRender")) {
	            return subchild.preRender();
	          } else {
	            return subchild.toString();
	          }
	        }, this);
	        utils.flattenPreRender(results, pieces);
	        return [Object.create({}, {
	          /**
	           * @type {Array.<Object>}
	           */
	          children: {
	            value: results,
	          },
	          /**
	           * @type {string}
	           */
	          key: {
	            value: this.key,
	          },
	          /**
	           * @type {string}
	           */
	          value: {
	            value: this.value,
	          },
	          /**
	           * @type {string}
	           */
	          variable: {
	            value: this.variable,
	          },
	          /**
	           * @param {*=} opt_data
	           * @return {string}
	           */
	          toString: {
	            value: function (opt_data) {
	              var results = [], data, loopData, idCount = 0, keys;
	              data = opt_data || {};
	              loopData = utils.getVariable(this.variable, data);
	              if (Error.prototype.isPrototypeOf(loopData)) {
	                return "";
	              }
	              switch(Object.prototype.toString.call(loopData)) {
	                case "[object Array]":
	                  return loopData.map(function (value, index) {
	                    var childData, key, results;
	                    key = "" + index;
	                    childData = {__context__: data};
	                    childData[this.key] = key;
	                    childData[this.value] = value;
	                    results = this.children.map(function (child) {
	                      return child.toString(childData);
	                    }).join("");
	                    idCount++;
	                    return results;
	                  }, this).join("");
	                case "[object Object]":
	                  keys = Object.keys(loopData);
	                  keys.forEach(function (key) {
	                    var childData = {__context__: data};
	                    childData[this.key] = key;
	                    childData[this.value] = loopData[key];
	                    results = results.concat(this.children.map(function (child) {
	                      return child.toString(childData);
	                    }));
	                    idCount++;
	                  }, this);
	                  return results.join("");
	              }
	              return "";
	            },
	          },
	        })];
	      },
	      enumerable: true,
	    },
	  });
	}

	module.exports = {
	  For: For,
	  createFor: createFor,
	};


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Attribute, 
	    type = __webpack_require__(8).type;

	/**
	 * Prototype for Attribute
	 */
	Attribute = {
	  /**
	   * @type {string}
	   * @private
	   */
	  name_: "",
	};

	function createAttribute() {
	  return Object.create(Attribute, {
	    name: {
	      set: function (name) {
	        this.name_ = name.toLowerCase();
	      },
	      get: function () {
	        return this.name_;
	      },
	      enumerable: true,
	    },
	    /**
	     * @type {string|Variable}
	     */
	    value: {
	      writable: true,
	    },
	    /**
	     * @return {Object}
	     */
	    valueOf: {
	      value: function () {
	        return {
	          value: this.value,
	          name: this.name,
	        };
	      },
	    },
	  });
	}

	module.exports = {
	  Attribute: Attribute,
	  createAttribute: createAttribute,
	};


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var entities, regexp;

	entities = {
	  "&apos;"     : "\u0027",
	  "&quot;"     : "\u0022",
	  "&amp;"      : "\u0026",
	  "&lt;"       : "\u003C",
	  "&gt;"       : "\u003E",
	  "&nbsp;"     : "\u00A0",
	  "&iexcl;"    : "\u00A1",
	  "&cent;"     : "\u00A2",
	  "&pound;"    : "\u00A3",
	  "&curren;"   : "\u00A4",
	  "&yen;"      : "\u00A5",
	  "&brvbar;"   : "\u00A6",
	  "&sect;"     : "\u00A7",
	  "&uml;"      : "\u00A8",
	  "&copy;"     : "\u00A9",
	  "&ordf;"     : "\u00AA",
	  "&laquo;"    : "\u00AB",
	  "&not;"      : "\u00AC",
	  "&shy;"      : "\u00AD",
	  "&reg;"      : "\u00AE",
	  "&macr;"     : "\u00AF",
	  "&deg;"      : "\u00B0",
	  "&plusmn;"   : "\u00B1",
	  "&sup2;"     : "\u00B2",
	  "&sup3;"     : "\u00B3",
	  "&acute;"    : "\u00B4",
	  "&micro;"    : "\u00B5",
	  "&para;"     : "\u00B6",
	  "&middot;"   : "\u00B7",
	  "&cedil;"    : "\u00B8",
	  "&sup1;"     : "\u00B9",
	  "&ordm;"     : "\u00BA",
	  "&raquo;"    : "\u00BB",
	  "&frac14;"   : "\u00BC",
	  "&frac12;"   : "\u00BD",
	  "&frac34;"   : "\u00BE",
	  "&iquest;"   : "\u00BF",
	  "&Agrave;"   : "\u00C0",
	  "&Aacute;"   : "\u00C1",
	  "&Acirc;"    : "\u00C2",
	  "&Atilde;"   : "\u00C3",
	  "&Auml;"     : "\u00C4",
	  "&Aring;"    : "\u00C5",
	  "&AElig;"    : "\u00C6",
	  "&Ccedil;"   : "\u00C7",
	  "&Egrave;"   : "\u00C8",
	  "&Eacute;"   : "\u00C9",
	  "&Ecirc;"    : "\u00CA",
	  "&Euml;"     : "\u00CB",
	  "&Igrave;"   : "\u00CC",
	  "&Iacute;"   : "\u00CD",
	  "&Icirc;"    : "\u00CE",
	  "&Iuml;"     : "\u00CF",
	  "&ETH;"      : "\u00D0",
	  "&Ntilde;"   : "\u00D1",
	  "&Ograve;"   : "\u00D2",
	  "&Oacute;"   : "\u00D3",
	  "&Ocirc;"    : "\u00D4",
	  "&Otilde;"   : "\u00D5",
	  "&Ouml;"     : "\u00D6",
	  "&times;"    : "\u00D7",
	  "&Oslash;"   : "\u00D8",
	  "&Ugrave;"   : "\u00D9",
	  "&Uacute;"   : "\u00DA",
	  "&Ucirc;"    : "\u00DB",
	  "&Uuml;"     : "\u00DC",
	  "&Yacute;"   : "\u00DD",
	  "&THORN;"    : "\u00DE",
	  "&szlig;"    : "\u00DF",
	  "&agrave;"   : "\u00E0",
	  "&aacute;"   : "\u00E1",
	  "&acirc;"    : "\u00E2",
	  "&atilde;"   : "\u00E3",
	  "&auml;"     : "\u00E4",
	  "&aring;"    : "\u00E5",
	  "&aelig;"    : "\u00E6",
	  "&ccedil;"   : "\u00E7",
	  "&egrave;"   : "\u00E8",
	  "&eacute;"   : "\u00E9",
	  "&ecirc;"    : "\u00EA",
	  "&euml;"     : "\u00EB",
	  "&igrave;"   : "\u00EC",
	  "&iacute;"   : "\u00ED",
	  "&icirc;"    : "\u00EE",
	  "&iuml;"     : "\u00EF",
	  "&eth;"      : "\u00F0",
	  "&ntilde;"   : "\u00F1",
	  "&ograve;"   : "\u00F2",
	  "&oacute;"   : "\u00F3",
	  "&ocirc;"    : "\u00F4",
	  "&otilde;"   : "\u00F5",
	  "&ouml;"     : "\u00F6",
	  "&divide;"   : "\u00F7",
	  "&oslash;"   : "\u00F8",
	  "&ugrave;"   : "\u00F9",
	  "&uacute;"   : "\u00FA",
	  "&ucirc;"    : "\u00FB",
	  "&uuml;"     : "\u00FC",
	  "&yacute;"   : "\u00FD",
	  "&thorn;"    : "\u00FE",
	  "&yuml;"     : "\u00FF",
	  "&OElig;"    : "\u0152",
	  "&oelig;"    : "\u0153",
	  "&Scaron;"   : "\u0160",
	  "&scaron;"   : "\u0161",
	  "&Yuml;"     : "\u0178",
	  "&fnof;"     : "\u0192",
	  "&circ;"     : "\u02C6",
	  "&tilde;"    : "\u02DC",
	  "&Alpha;"    : "\u0391",
	  "&Beta;"     : "\u0392",
	  "&Gamma;"    : "\u0393",
	  "&Delta;"    : "\u0394",
	  "&Epsilon;"  : "\u0395",
	  "&Zeta;"     : "\u0396",
	  "&Eta;"      : "\u0397",
	  "&Theta;"    : "\u0398",
	  "&Iota;"     : "\u0399",
	  "&Kappa;"    : "\u039A",
	  "&Lambda;"   : "\u039B",
	  "&Mu;"       : "\u039C",
	  "&Nu;"       : "\u039D",
	  "&Xi;"       : "\u039E",
	  "&Omicron;"  : "\u039F",
	  "&Pi;"       : "\u03A0",
	  "&Rho;"      : "\u03A1",
	  "&Sigma;"    : "\u03A3",
	  "&Tau;"      : "\u03A4",
	  "&Upsilon;"  : "\u03A5",
	  "&Phi;"      : "\u03A6",
	  "&Chi;"      : "\u03A7",
	  "&Psi;"      : "\u03A8",
	  "&Omega;"    : "\u03A9",
	  "&alpha;"    : "\u03B1",
	  "&beta;"     : "\u03B2",
	  "&gamma;"    : "\u03B3",
	  "&delta;"    : "\u03B4",
	  "&epsilon;"  : "\u03B5",
	  "&zeta;"     : "\u03B6",
	  "&eta;"      : "\u03B7",
	  "&theta;"    : "\u03B8",
	  "&iota;"     : "\u03B9",
	  "&kappa;"    : "\u03BA",
	  "&lambda;"   : "\u03BB",
	  "&mu;"       : "\u03BC",
	  "&nu;"       : "\u03BD",
	  "&xi;"       : "\u03BE",
	  "&omicron;"  : "\u03BF",
	  "&pi;"       : "\u03C0",
	  "&rho;"      : "\u03C1",
	  "&sigmaf;"   : "\u03C2",
	  "&sigma;"    : "\u03C3",
	  "&tau;"      : "\u03C4",
	  "&upsilon;"  : "\u03C5",
	  "&phi;"      : "\u03C6",
	  "&chi;"      : "\u03C7",
	  "&psi;"      : "\u03C8",
	  "&omega;"    : "\u03C9",
	  "&thetasym;" : "\u03D1",
	  "&upsih;"    : "\u03D2",
	  "&piv;"      : "\u03D6",
	  "&ensp;"     : "\u2002",
	  "&emsp;"     : "\u2003",
	  "&thinsp;"   : "\u2009",
	  "&zwnj;"     : "\u200C",
	  "&zwj;"      : "\u200D",
	  "&lrm;"      : "\u200E",
	  "&rlm;"      : "\u200F",
	  "&ndash;"    : "\u2013",
	  "&mdash;"    : "\u2014",
	  "&lsquo;"    : "\u2018",
	  "&rsquo;"    : "\u2019",
	  "&sbquo;"    : "\u201A",
	  "&ldquo;"    : "\u201C",
	  "&rdquo;"    : "\u201D",
	  "&bdquo;"    : "\u201E",
	  "&dagger;"   : "\u2020",
	  "&Dagger;"   : "\u2021",
	  "&bull;"     : "\u2022",
	  "&hellip;"   : "\u2026",
	  "&permil;"   : "\u2030",
	  "&prime;"    : "\u2032",
	  "&Prime;"    : "\u2033",
	  "&lsaquo;"   : "\u2039",
	  "&rsaquo;"   : "\u203A",
	  "&oline;"    : "\u203E",
	  "&frasl;"    : "\u2044",
	  "&euro;"     : "\u20AC",
	  "&image;"    : "\u2111",
	  "&weierp;"   : "\u2118",
	  "&real;"     : "\u211C",
	  "&trade;"    : "\u2122",
	  "&alefsym;"  : "\u2135",
	  "&larr;"     : "\u2190",
	  "&uarr;"     : "\u2191",
	  "&rarr;"     : "\u2192",
	  "&darr;"     : "\u2193",
	  "&harr;"     : "\u2194",
	  "&crarr;"    : "\u21B5",
	  "&lArr;"     : "\u21D0",
	  "&uArr;"     : "\u21D1",
	  "&rArr;"     : "\u21D2",
	  "&dArr;"     : "\u21D3",
	  "&hArr;"     : "\u21D4",
	  "&forall;"   : "\u2200",
	  "&part;"     : "\u2202",
	  "&exist;"    : "\u2203",
	  "&empty;"    : "\u2205",
	  "&nabla;"    : "\u2207",
	  "&isin;"     : "\u2208",
	  "&notin;"    : "\u2209",
	  "&ni;"       : "\u220B",
	  "&prod;"     : "\u220F",
	  "&sum;"      : "\u2211",
	  "&minus;"    : "\u2212",
	  "&lowast;"   : "\u2217",
	  "&radic;"    : "\u221A",
	  "&prop;"     : "\u221D",
	  "&infin;"    : "\u221E",
	  "&ang;"      : "\u2220",
	  "&and;"      : "\u2227",
	  "&or;"       : "\u2228",
	  "&cap;"      : "\u2229",
	  "&cup;"      : "\u222A",
	  "&int;"      : "\u222B",
	  "&there4;"   : "\u2234",
	  "&sim;"      : "\u223C",
	  "&cong;"     : "\u2245",
	  "&asymp;"    : "\u2248",
	  "&ne;"       : "\u2260",
	  "&equiv;"    : "\u2261",
	  "&le;"       : "\u2264",
	  "&ge;"       : "\u2265",
	  "&sub;"      : "\u2282",
	  "&sup;"      : "\u2283",
	  "&nsub;"     : "\u2284",
	  "&sube;"     : "\u2286",
	  "&supe;"     : "\u2287",
	  "&oplus;"    : "\u2295",
	  "&otimes;"   : "\u2297",
	  "&perp;"     : "\u22A5",
	  "&sdot;"     : "\u22C5",
	  "&lceil;"    : "\u2308",
	  "&rceil;"    : "\u2309",
	  "&lfloor;"   : "\u230A",
	  "&rfloor;"   : "\u230B",
	  "&lang;"     : "\u2329",
	  "&rang;"     : "\u232A",
	  "&loz;"      : "\u25CA",
	  "&spades;"   : "\u2660",
	  "&clubs;"    : "\u2663",
	  "&hearts;"   : "\u2665",
	  "&diams;"    : "\u2666",
	};

	regexp = /&#x(\d+);/

	module.exports = {
	  entities: entities,
	  regexp: regexp,
	};


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var type, TEMPLATE_TYPE,
	    utils = __webpack_require__(9);

	/**
	 * @enum {string}
	 */
	type = {
	  ELEMENT: "ELEMENT",
	  TEXT: "TEXT",
	  VARIABLE: "VARIABLE",
	  FOR: "FOR",
	  IN: "IN",
	  ENDFOR: "ENDFOR",
	  IF: "IF",
	  ELIF: "ELIF",
	  ELSE: "ELSE",
	  ENDIF: "ENDIF",
	  BLOCK: "BLOCK",
	  EXTENDS: "EXTENDS",
	  STRING: "STRING",
	};

	/**
	 * @param {ast} ast
	 */
	function buildTemplate(ast) {
	  var name;
	  name = ast.attributes[0].value;
	  return Object.create({
	  }, { 
	    /**
	     * @type {Array.<string|Variable>}
	     * @private
	     */
	    preRendered_: {
	      value: (function () {
	        var results = [];
	        utils.flattenPreRender(results, ast.preRender());
	        return results;
	      }()),
	    },
	    name: {
	      value: name,
	      enumerable: true,
	    },
	    ast: {
	      value: ast,
	    },
	    /**
	     * @param {Object=}
	     * @return {string}
	     */
	    toString: {
	      value: function (opt_data) {
	        var result;
	        result = "";
	        this.preRendered_.forEach(function (piece) {
	          result += piece.toString(opt_data);
	        });
	        return result;
	      }
	    }
	  });
	}

	/**
	 * @const
	 * @type {string}
	 */
	TEMPLATE_TYPE = "TEMPLATE";

	module.exports = {
	  type: type,
	  TEMPLATE_TYPE: TEMPLATE_TYPE,
	  buildTemplate: buildTemplate,
	};


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var uniqueId,
	    meteorVariable = __webpack_require__(10);

	/**
	 * @type {number}
	 */
	uniqueId = 0;

	/**
	 * @return {string}
	 */
	function getUniqueId() {
	  uniqueId += 1;
	  return "" + uniqueId;
	}

	/**
	 * This function reduces multiple arrays into one, while concatonating strings. Strings
	 * are concatonated until we reach an object, like a variable or an if. Strings and objects 
	 * are put on the array, and then later, calling toString(DATA) on this will resolve
	 * variables and if statements into strings and concatonate it all up into a single string.
	 * @param {Array} results
	 * @param {Array|string|ast} pieces
	 * @param {string} currentString
	 * @return {Array<results, string>}
	 */
	function flattenPreRender_ (results, pieces, currentString) {
	  var results;

	  pieces.forEach(function (piece) {
	    if (typeof piece === "string") {
	      currentString += piece;
	    } else {
	      if (Object.prototype.toString.call(piece) === "[object Array]") {
	        /*
	         * We want to build strings until we hit an object like a variable or an if, so we
	         * modify `results`, while also returning currentString because we may be building
	         * up this string some more inside the next recursive call to flattenPreRender.
	         *
	         * XXX: This recursion could blow up if the stack got too big, it would have to be
	         * pretty big I think.
	         */
	        currentString = flattenPreRender_(results, piece, currentString);
	      } else {
	        if (currentString) {
	          results.push(currentString);
	        }
	        currentString = "";
	        results.push(piece);
	      }
	    }
	  });
	  return currentString;
	}

	/**
	 * @param {Array} results
	 * @param {Array} pieces
	 */
	function flattenPreRender (results, pieces) {
	  var finalString = flattenPreRender_(results, pieces, "");
	  if (finalString) {
	    results.push(finalString);
	  }
	}

	/**
	 * Walk up data context to find the variable.
	 * @param {string} name
	 * @param {Object} data
	 * @return {*|Error} Returns an error if not found.
	 */
	function getVariable_ (name, data) {
	  var result;
	  if (data.hasOwnProperty(name)) {
	    if (meteorVariable.Variable.isPrototypeOf(data[name])) {
	      return data[name].value;
	    }
	    return data[name];
	  }
	  if (data.__context__) {
	    return getVariable(name, data.__context__);
	  }
	  return new Error("Not found");
	}

	/**
	 * @param {Array.<string>} namespaces
	 * @param {Object} data
	 * @return {*|Error}
	 */
	function searchForNamespace (namespaces, data) {
	  var result, currentPath = namespaces.shift();
	  result = getVariable_(currentPath, data);
	  if (Error.prototype.isPrototypeOf(result) || !namespaces.length) {
	    return result;
	  }
	  if (Object.prototype.toString.call(result) !== "[object Object]") {
	    return new Error("Not found");
	  }
	  return searchForNamespace(namespaces, result);
	}

	/**
	 * @param {Array.<string>} namespaces
	 * @param {Array.<Object>} datas
	 * @return {*|Error}
	 */
	function searchForData (namespaces, datas) {
	  var result, data = datas.shift();
	  result = searchForNamespace([].concat(namespaces), data);
	  if (!Error.prototype.isPrototypeOf(result) || !datas.length) {
	    return result;
	  }
	  return searchForData(namespaces, datas);
	}

	/**
	 * @param {string} name
	 * @param {Array.<Object>|Object} datas
	 */
	function getVariable (name, datas) {
	  var result;
	  if (Object.prototype.toString.call(datas) !== "[object Array]") {
	    datas = [datas];
	  }
	  result = searchForData(name.split("."), datas);
	  return result;
	}

	module.exports = {
	  flattenPreRender: flattenPreRender,
	  getUniqueId: getUniqueId,
	  getVariable: getVariable,
	};


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var Variable = {};

	/**
	 * @param {string} name
	 * @return {MeteorVariable}
	 */
	function createVariable(name) {
	  if (!name) {
	    throw "A live meteor variable needs a name";
	  }
	  /**
	   * @type {MeteorVariable}
	   * @constructor
	   */
	  return Object.create(Variable, {
	    name: {
	      value: name,
	    },
	    tracker: {
	      value: null,
	      writable: true,
	      enumerable: true,
	    },
	    value: {
	      value: null,
	      writable: true,
	      enumerable: true,
	    },
	  });
	}

	module.exports = {
	  createVariable: createVariable,
	  Variable: Variable,
	};


/***/ }
/******/ ])